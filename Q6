#include <iostream>
using namespace std;

#define MAX 100

// Function to display a sparse matrix
void display(int mat[][3], int nonZero) {
    cout << "Row\tCol\tVal\n";
    for (int i = 0; i <= nonZero; i++) {
        cout << mat[i][0] << "\t" << mat[i][1] << "\t" << mat[i][2] << endl;
    }
}

// (a) Transpose of Sparse Matrix
void transpose(int mat[][3], int trans[][3]) {
    int rows = mat[0][0], cols = mat[0][1], nonZero = mat[0][2];
    trans[0][0] = cols;
    trans[0][1] = rows;
    trans[0][2] = nonZero;

    int k = 1;
    for (int i = 0; i < cols; i++) {
        for (int j = 1; j <= nonZero; j++) {
            if (mat[j][1] == i) {
                trans[k][0] = mat[j][1];
                trans[k][1] = mat[j][0];
                trans[k][2] = mat[j][2];
                k++;
            }
        }
    }
}

// (b) Addition of Two Sparse Matrices
void add(int a[][3], int b[][3], int sum[][3]) {
    if (a[0][0] != b[0][0] || a[0][1] != b[0][1]) {
        cout << "Addition not possible, dimensions mismatch.\n";
        return;
    }

    int i = 1, j = 1, k = 1;
    int m = a[0][2], n = b[0][2];

    sum[0][0] = a[0][0];
    sum[0][1] = a[0][1];

    while (i <= m && j <= n) {
        if (a[i][0] < b[j][0] || (a[i][0] == b[j][0] && a[i][1] < b[j][1])) {
            sum[k][0] = a[i][0];
            sum[k][1] = a[i][1];
            sum[k][2] = a[i][2];
            i++; k++;
        }
        else if (b[j][0] < a[i][0] || (b[j][0] == a[i][0] && b[j][1] < a[i][1])) {
            sum[k][0] = b[j][0];
            sum[k][1] = b[j][1];
            sum[k][2] = b[j][2];
            j++; k++;
        }
        else {
            int val = a[i][2] + b[j][2];
            if (val != 0) {
                sum[k][0] = a[i][0];
                sum[k][1] = a[i][1];
                sum[k][2] = val;
                k++;
            }
            i++; j++;
        }
    }

    while (i <= m) {
        sum[k][0] = a[i][0];
        sum[k][1] = a[i][1];
        sum[k][2] = a[i][2];
        i++; k++;
    }

    while (j <= n) {
        sum[k][0] = b[j][0];
        sum[k][1] = b[j][1];
        sum[k][2] = b[j][2];
        j++; k++;
    }

    sum[0][2] = k - 1;
}

// (c) Multiplication of Two Sparse Matrices
void multiply(int a[][3], int b[][3], int result[][3]) {
    if (a[0][1] != b[0][0]) {
        cout << "Multiplication not possible, dimension mismatch.\n";
        return;
    }

    int rows = a[0][0], cols = b[0][1];
    int m = a[0][2], n = b[0][2];
    int k = 1;

    result[0][0] = rows;
    result[0][1] = cols;

    // Create transpose of B for easier matching
    int transB[MAX][3];
    transpose(b, transB);

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            int sum = 0;
            for (int p = 1; p <= m; p++) {
                if (a[p][0] == i) {
                    for (int q = 1; q <= n; q++) {
                        if (transB[q][0] == j && a[p][1] == transB[q][1]) {
                            sum += a[p][2] * transB[q][2];
                        }
                    }
                }
            }
            if (sum != 0) {
                result[k][0] = i;
                result[k][1] = j;
                result[k][2] = sum;
                k++;
            }
        }
    }
    result[0][2] = k - 1;
}

// ------------------- MAIN -------------------
int main() {
    // Example Sparse Matrices
    int A[6][3] = {
        {3, 3, 4}, // 3x3 matrix, 4 non-zero
        {0, 0, 1},
        {0, 2, 2},
        {1, 1, 3},
        {2, 2, 4}
    };

    int B[5][3] = {
        {3, 3, 3}, // 3x3 matrix, 3 non-zero
        {0, 1, 5},
        {1, 1, 6},
        {2, 0, 7}
    };

    cout << "Matrix A (Triplet):\n"; display(A, A[0][2]);
    cout << "\nMatrix B (Triplet):\n"; display(B, B[0][2]);

    // (a) Transpose
    int transA[MAX][3];
    transpose(A, transA);
    cout << "\nTranspose of A:\n"; display(transA, transA[0][2]);

    // (b) Addition
    int sum[MAX][3];
    add(A, B, sum);
    cout << "\nA + B (Triplet):\n"; display(sum, sum[0][2]);

    // (c) Multiplication
    int product[MAX][3];
    multiply(A, B, product);
    cout << "\nA * B (Triplet):\n"; display(product, product[0][2]);

    return 0;
}
